#include "kernel_wenland_c2.h"

#include <cmath>

namespace SPH
{
	//=================================================================================================//
	KernelWendlandC2::KernelWendlandC2(Real h)
		: Kernel(h, "Wendland2CKernel")
	{
		factor_W_1D_ = inv_h_ * 3.0 / 4.0;
		factor_W_2D_ = inv_h_ * inv_h_ * 7.0 / (4.0 * Pi);
		factor_W_3D_ = inv_h_ * inv_h_ * inv_h_ * 21.0 / (16.0 * Pi);
		setDerivativeParameters();
	}
	//=================================================================================================//
	Real KernelWendlandC2::W_1D(const Real q) const
	{
		return powerN(1.0 - 0.5 * q, 4) * (1.0 + 2.0 * q);
	}
	//=================================================================================================//
	Real KernelWendlandC2::W_2D(const Real q) const
	{
		return W_1D(q);
	}
	//=================================================================================================//
	Real KernelWendlandC2::W_3D(const Real q) const
	{
		return W_2D(q);
	}
	//=================================================================================================//
	Real KernelWendlandC2::dW_1D(const Real q) const
	{
		return 0.625 * powerN(q - 2.0, 3) * q;
	}
	//=================================================================================================//
	Real KernelWendlandC2::dW_2D(const Real q) const
	{
		return dW_1D(q);
	}
	//=================================================================================================//
	Real KernelWendlandC2::dW_3D(const Real q) const
	{
		return dW_2D(q);
	}
	//=================================================================================================//
	Real KernelWendlandC2::d2W_1D(const Real q) const
	{
		return 1.25 * powerN(q - 2.0, 2) * (2.0 * q - 1.0);
	}
	//=================================================================================================//
	Real KernelWendlandC2::d2W_2D(const Real q) const
	{
		return d2W_1D(q);
	}
	//=================================================================================================//
	Real KernelWendlandC2::d2W_3D(const Real q) const
	{
		return d2W_2D(q);
	}
	//=================================================================================================//
	Winfunc::Winfunc(Real h)
		: Kernel(h, "WinfuncPD")//Monaghan, Lattanzio (1985)
	{
		factor_W_1D_ = inv_h_;
		//factor_W_2D_ = inv_h_ * inv_h_ * 7.0 / (4.0 * Pi);
		//factor_W_3D_ = inv_h_ * inv_h_ * inv_h_ * 21.0 / (16.0 * Pi);
		factor_W_2D_ = inv_h_ * inv_h_ * 15.0 / (7.0 * Pi);
		factor_W_3D_ = inv_h_ * inv_h_ * inv_h_ * 3.0 / (2.0 * Pi);
		setDerivativeParameters();
	}
	//=================================================================================================//
	Real Winfunc::W_1D(const Real q) const
	{
		return q < 1 ? (2.0 / 3.0 - powerN(q, 2) + 0.5 * powerN(q, 3)) : powerN(2.0 - q, 3) / 6.0;
	}
	//=================================================================================================//
	Real Winfunc::W_2D(const Real q) const
	{
		return W_1D(q);
	}
	//=================================================================================================//
	Real Winfunc::W_3D(const Real q) const
	{
		return W_2D(q);
	}
	//=================================================================================================//
	Real Winfunc::dW_1D(const Real q) const
	{
		return q < 1 ? (-2.0 * q + 1.5 * powerN(q, 2)) : -1.0 * powerN(2.0 - q, 2) / 2.0;
	}
	//=================================================================================================//
	Real Winfunc::dW_2D(const Real q) const
	{
		return dW_1D(q);
	}
	//=================================================================================================//
	Real Winfunc::dW_3D(const Real q) const
	{
		return dW_2D(q);
	}
	//=================================================================================================//
	Real Winfunc::d2W_1D(const Real q) const
	{
		return q < 1 ? (-2.0 + 3 * q) : 2.0 - q;
	}
	//=================================================================================================//
	Real Winfunc::d2W_2D(const Real q) const
	{
		return d2W_1D(q);
	}
	//=================================================================================================//
	Real Winfunc::d2W_3D(const Real q) const
	{
		return d2W_2D(q);
	}
	//=================================================================================================//
}
